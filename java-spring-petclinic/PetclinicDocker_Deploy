pipeline {
  agent any
  parameters {
    choice(name: 'VM', choices: ['dev', 'train'])
    extendedChoice(
    name: 'BUILD',
    description: 'Build version',
    multiSelectDelimiter: ',',
    visibleItemCount: 5,
    quoteValue: false,
    type: 'PT_SINGLE_SELECT',
    propertyFile: "/var/www/petclinic/BUILD_DOCKER",
    propertyKey: "version")
  }

    stages {
        stage('Deploy_to_Dev') {
            when { 
                environment name: 'VM', value: 'dev' 
            }
            steps {
                sh '''
                 ssh sneg061@10.0.5.9 << EOF
                 docker rm ps-petclinic --force
                 sleep 10
                 docker pull academydevops.azurecr.io/ps/petclinic:${BUILD}
                 docker run -d -p 8080:8080 --name ps-petclinic academydevops.azurecr.io/ps/petclinic:${BUILD}
                 exit
                 EOF
                 '''
            }
        }

        stage('Deploy_to_train') {
            when { 
                    environment name: 'VM', value: 'train' 
            }
            steps {
                sh '''
                 ssh sneg061@10.0.5.18 << EOF
                 docker rm ps-petclinic --force
                 sleep 10
                 docker pull academydevops.azurecr.io/ps/petclinic:${BUILD}
                 docker run -d -p 8080:8080 --name ps-petclinic academydevops.azurecr.io/ps/petclinic:${BUILD}
                 exit
                 EOF
                 '''
            }
        }
        
        stage ("waiting_60sec") {
            steps {
                sleep 60
            }
        }
        
        stage('Healthcheck_dev'){
            when { 
                environment name: 'VM', value: 'dev' 
            }
            steps{
                script{
                    def commandStdout = sh(returnStdout: true, script: "curl http://ps-dev.westeurope.cloudapp.azure.com:8080 | grep 'Welcome'")
                    if (commandStdout.contains("Welcome")) {
                        currentBuild.result = "Success"
                    }else {
                        println("The line is not found")
                        exit 1
                    }
                }
            }
        }
        
        stage('Healthcheck_train'){
            when { 
                environment name: 'VM', value: 'train' 
            }
            steps{
                script{
                    def commandStdout = sh(returnStdout: true, script: "curl http://ps-train.westeurope.cloudapp.azure.com:8080 | grep 'Welcome'")
                    if (commandStdout.contains("Welcome")) {
                        currentBuild.result = "Success"
                    }else {
                        println("The line is not found")
                        exit 1
                    }
                }
            }
        }
    }   
}


